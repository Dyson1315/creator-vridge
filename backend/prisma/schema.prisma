generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String     @id @default(uuid())
  email            String     @unique
  passwordHash     String
  userType         UserType
  status           UserStatus @default("ACTIVE")
  emailVerified    Boolean    @default(false)
  emailVerifiedAt  DateTime?
  lastLoginAt      DateTime?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  artistMatches    Match[]    @relation("ArtistMatches")
  vtubetMatches    Match[]    @relation("VTuberMatches")
  receivedMessages Message[]  @relation("ReceivedMessages")
  sentMessages     Message[]  @relation("SentMessages")
  profile          Profile?

  @@map("users")
}

model Profile {
  id                 String             @id @default(uuid())
  userId             String             @unique
  displayName        String?
  bio                String?
  avatarUrl          String?
  portfolioUrls      Json?
  skills             Json?
  priceRangeMin      Decimal?
  priceRangeMax      Decimal?
  availability       AvailabilityStatus @default("AVAILABLE")
  timezone           String?
  preferredCommStyle String?
  experience         Int?
  rating             Decimal?
  totalReviews       Int                @default(0)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  avatarData         String?
  avatarMimeType     String?
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Match {
  id           String       @id @default(uuid())
  vtuberUserId String
  artistUserId String
  matchScore   Decimal?
  status       MatchStatus  @default("PENDING")
  description  String?
  budget       Decimal?
  deadline     DateTime?
  matchedAt    DateTime     @default(now())
  respondedAt  DateTime?
  completedAt  DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  artistUser   User         @relation("ArtistMatches", fields: [artistUserId], references: [id])
  vtuberUser   User         @relation("VTuberMatches", fields: [vtuberUserId], references: [id])
  messages     Message[]
  transaction  Transaction?

  @@unique([vtuberUserId, artistUserId])
  @@map("matches")
}

model Transaction {
  id                    String            @id @default(uuid())
  matchId               String            @unique
  amount                Decimal
  currency              Currency          @default("USD")
  status                TransactionStatus @default("PENDING")
  platformFee           Decimal
  artistAmount          Decimal
  stripePaymentIntentId String?
  stripeChargeId        String?
  refundAmount          Decimal?
  escrowReleasedAt      DateTime?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  match                 Match             @relation(fields: [matchId], references: [id])

  @@map("transactions")
}

model Message {
  id            String    @id @default(uuid())
  matchId       String
  senderId      String
  receiverId    String
  content       String
  messageType   String    @default("text")
  attachmentUrl String?
  isRead        Boolean   @default(false)
  readAt        DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  receiver      User      @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender        User      @relation("SentMessages", fields: [senderId], references: [id])
  match         Match     @relation(fields: [matchId], references: [id])

  @@map("messages")
}

enum UserType {
  VTUBER
  ARTIST
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum AvailabilityStatus {
  AVAILABLE
  BUSY
  UNAVAILABLE
}

enum MatchStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  CANCELLED
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum Currency {
  USD
  JPY
  EUR
  KRW
}
